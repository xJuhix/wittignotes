{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { transformToNestObject } from 'react-hook-form';\n/**\n * From 0.32.0, Yup add TypeScript support and `path` typing is optional that's why we have `@ts-expect-error`\n * FYI: `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n * react-hook-form's values are object so path is defined\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => {\n  return Array.isArray(error.inner) && error.inner.length ? error.inner.reduce((previous, {\n    path,\n    message,\n    type\n  }) => {\n    // @ts-expect-error\n    const previousTypes = previous[path] && previous[path].types || {};\n    const key = path || type;\n    return Object.assign(Object.assign({}, previous), key ? {\n      [key]: Object.assign(Object.assign({}, previous[key] || {\n        message,\n        type\n      }), validateAllFieldCriteria ? {\n        types: Object.assign(Object.assign({}, previousTypes), {\n          // @ts-expect-error\n          [type]: previousTypes[type] ? // @ts-expect-error\n          [...[].concat(previousTypes[type]), message] : message\n        })\n      } : {})\n    } : {});\n  }, {}) : {\n    // @ts-expect-error\n    [error.path]: {\n      message: error.message,\n      type: error.type\n    }\n  };\n};\n\nexport const yupResolver = (schema, options = {\n  abortEarly: false\n}) => async (values, context, validateAllFieldCriteria = false) => {\n  try {\n    if (options.context && process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\");\n    }\n\n    return {\n      values: await schema.validate(values, Object.assign(Object.assign({}, options), {\n        context\n      })),\n      errors: {}\n    };\n  } catch (e) {\n    const parsedErrors = parseErrorSchema(e, validateAllFieldCriteria);\n    return {\n      values: {},\n      errors: transformToNestObject(parsedErrors)\n    };\n  }\n};","map":{"version":3,"sources":["../src/yup.ts"],"names":[],"mappings":"AAAA;AACA,SAAmB,qBAAnB,QAA6D,iBAA7D;AAGA;;;;;AAKG;;AACH,MAAM,gBAAgB,GAAG,CACvB,KADuB,EAEvB,wBAFuB,KAGrB;AACF,SAAO,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,KAApB,KAA8B,KAAK,CAAC,KAAN,CAAY,MAA1C,GACH,KAAK,CAAC,KAAN,CAAY,MAAZ,CACE,CAAC,QAAD,EAAgC;AAAE,IAAA,IAAF;AAAQ,IAAA,OAAR;AAAiB,IAAA;AAAjB,GAAhC,KAA2D;AACzD;AACA,UAAM,aAAa,GAAI,QAAQ,CAAC,IAAD,CAAR,IAAkB,QAAQ,CAAC,IAAD,CAAR,CAAe,KAAlC,IAA4C,EAAlE;AACA,UAAM,GAAG,GAAG,IAAI,IAAI,IAApB;AAEA,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,QADL,CAAA,EAEM,GAAG,GACH;AACE,OAAC,GAAD,GAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACC,QAAQ,CAAC,GAAD,CAAR,IAAiB;AACnB,QAAA,OADmB;AAEnB,QAAA;AAFmB,OADlB,CAAA,EAKC,wBAAwB,GACxB;AACE,QAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,aADA,CAAA,EACa;AAChB;AACA,WAAC,IAAD,GAAQ,aAAa,CAAC,IAAD,CAAb,GACJ;AACA,WAAC,GAAG,GAAG,MAAH,CAAU,aAAa,CAAC,IAAD,CAAvB,CAAJ,EAAoC,OAApC,CAFI,GAGJ;AALY,SADb;AADP,OADwB,GAWxB,EAhBD;AADP,KADG,GAqBH,EAvBN,CAAA;AAyBD,GA/BH,EAgCE,EAhCF,CADG,GAmCH;AACE;AACA,KAAC,KAAK,CAAC,IAAP,GAAc;AAAE,MAAA,OAAO,EAAE,KAAK,CAAC,OAAjB;AAA0B,MAAA,IAAI,EAAE,KAAK,CAAC;AAAtC;AAFhB,GAnCJ;AAuCD,CA3CD;;AAiDA,OAAO,MAAM,WAAW,GAAG,CACzB,MADyB,EAEzB,OAAA,GAAgD;AAC9C,EAAA,UAAU,EAAE;AADkC,CAFvB,KAKE,OAC3B,MAD2B,EAE3B,OAF2B,EAG3B,wBAAwB,GAAG,KAHA,KAIzB;AACF,MAAI;AACF,QAAI,OAAO,CAAC,OAAR,IAAmB,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAAhD,EAA+D;AAC7D;AACA,MAAA,OAAO,CAAC,IAAR,CACE,+FADF;AAGD;;AACD,WAAO;AACL,MAAA,MAAM,EAAE,MAAM,MAAM,CAAC,QAAP,CAAgB,MAAhB,EAAsB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC/B,OAD+B,CAAA,EACxB;AACV,QAAA;AADU,OADwB,CAAtB,CADT;AAKL,MAAA,MAAM,EAAE;AALH,KAAP;AAOD,GAdD,CAcE,OAAO,CAAP,EAAU;AACV,UAAM,YAAY,GAAG,gBAAgB,CAAC,CAAD,EAAI,wBAAJ,CAArC;AACA,WAAO;AACL,MAAA,MAAM,EAAE,EADH;AAEL,MAAA,MAAM,EAAE,qBAAqB,CAAC,YAAD;AAFxB,KAAP;AAID;AACF,CA/BM","sourceRoot":"","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { transformToNestObject } from 'react-hook-form';\n/**\n * From 0.32.0, Yup add TypeScript support and `path` typing is optional that's why we have `@ts-expect-error`\n * FYI: `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n * react-hook-form's values are object so path is defined\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (error, validateAllFieldCriteria) => {\n    return Array.isArray(error.inner) && error.inner.length\n        ? error.inner.reduce((previous, { path, message, type }) => {\n            // @ts-expect-error\n            const previousTypes = (previous[path] && previous[path].types) || {};\n            const key = path || type;\n            return Object.assign(Object.assign({}, previous), (key\n                ? {\n                    [key]: Object.assign(Object.assign({}, (previous[key] || {\n                        message,\n                        type,\n                    })), (validateAllFieldCriteria\n                        ? {\n                            types: Object.assign(Object.assign({}, previousTypes), { \n                                // @ts-expect-error\n                                [type]: previousTypes[type]\n                                    ? // @ts-expect-error\n                                        [...[].concat(previousTypes[type]), message]\n                                    : message }),\n                        }\n                        : {})),\n                }\n                : {}));\n        }, {})\n        : {\n            // @ts-expect-error\n            [error.path]: { message: error.message, type: error.type },\n        };\n};\nexport const yupResolver = (schema, options = {\n    abortEarly: false,\n}) => async (values, context, validateAllFieldCriteria = false) => {\n    try {\n        if (options.context && process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\");\n        }\n        return {\n            values: await schema.validate(values, Object.assign(Object.assign({}, options), { context })),\n            errors: {},\n        };\n    }\n    catch (e) {\n        const parsedErrors = parseErrorSchema(e, validateAllFieldCriteria);\n        return {\n            values: {},\n            errors: transformToNestObject(parsedErrors),\n        };\n    }\n};\n//# sourceMappingURL=yup.js.map"]},"metadata":{},"sourceType":"module"}